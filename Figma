

/* ------------------ src/components/BookingForm.jsx (virtual) ------------------ */
import React, { useState } from 'react';

export function BookingForm({ onSubmit }) {
  const [form, setForm] = useState({
    fullName: '',
    email: '',
    date: '',
    time: '',
    partySize: 1,
    notes: '',
    agree: false,
  });
  const [errors, setErrors] = useState({});
  const [submitted, setSubmitted] = useState(false);

  function validate(values) {
    const errs = {};
    if (!values.fullName.trim()) errs.fullName = 'Full name is required.';
    if (!values.email.trim()) errs.email = 'Email is required.';
    else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(values.email)) errs.email = 'Email is invalid.';
    if (!values.date) errs.date = 'Please pick a date.';
    else {
      const picked = new Date(values.date);
      const today = new Date();
      today.setHours(0,0,0,0);
      if (picked < today) errs.date = 'Date cannot be in the past.';
    }
    if (!values.time) errs.time = 'Please pick a time.';
    if (!Number.isInteger(Number(values.partySize)) || values.partySize < 1) errs.partySize = 'Party size must be at least 1.';
    if (!values.agree) errs.agree = 'You must accept the terms.';
    return errs;
  }

  function handleChange(e) {
    const { name, value, type, checked } = e.target;
    setForm(prev => ({ ...prev, [name]: type === 'checkbox' ? checked : value }));
  }

  function handleSubmit(e) {
    e.preventDefault();
    const v = validate(form);
    setErrors(v);
    if (Object.keys(v).length === 0) {
      setSubmitted(true);
      // store booking as JSON in localStorage to simulate a backend
      const bookings = JSON.parse(localStorage.getItem('bookings') || '[]');
      const booking = { id: Date.now(), ...form };
      bookings.push(booking);
      localStorage.setItem('bookings', JSON.stringify(bookings));
      if (onSubmit) onSubmit(booking);
    }
  }

  return (
    <section aria-labelledby="booking-heading" className="bg-white rounded-2xl shadow p-6 max-w-2xl mx-auto">
      <h2 id="booking-heading" className="text-2xl font-semibold mb-2">Book a Table</h2>
      <p className="text-sm mb-4">Fill in the form below to reserve a table. Fields marked <span aria-hidden>★</span> are required.</p>

      <form onSubmit={handleSubmit} noValidate aria-describedby="form-errors">
        <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
          <div>
            <label htmlFor="fullName" className="block text-sm font-medium">Full name <span aria-hidden>★</span></label>
            <input
              id="fullName"
              name="fullName"
              type="text"
              aria-required="true"
              aria-invalid={errors.fullName ? 'true' : 'false'}
              aria-describedby={errors.fullName ? 'fullName-error' : undefined}
              value={form.fullName}
              onChange={handleChange}
              className="mt-1 block w-full rounded-md border px-3 py-2 focus:outline-none focus:ring focus:ring-offset-1"
            />
            {errors.fullName && <p id="fullName-error" className="mt-1 text-sm text-red-600" role="alert">{errors.fullName}</p>}
          </div>

          <div>
            <label htmlFor="email" className="block text-sm font-medium">Email <span aria-hidden>★</span></label>
            <input
              id="email"
              name="email"
              type="email"
              aria-required="true"
              aria-invalid={errors.email ? 'true' : 'false'}
              aria-describedby={errors.email ? 'email-error' : undefined}
              value={form.email}
              onChange={handleChange}
              className="mt-1 block w-full rounded-md border px-3 py-2 focus:outline-none focus:ring focus:ring-offset-1"
            />
            {errors.email && <p id="email-error" className="mt-1 text-sm text-red-600" role="alert">{errors.email}</p>}
          </div>

          <div>
            <label htmlFor="date" className="block text-sm font-medium">Date <span aria-hidden>★</span></label>
            <input
              id="date"
              name="date"
              type="date"
              aria-required="true"
              aria-invalid={errors.date ? 'true' : 'false'}
              aria-describedby={errors.date ? 'date-error' : undefined}
              value={form.date}
              onChange={handleChange}
              className="mt-1 block w-full rounded-md border px-3 py-2"
            />
            {errors.date && <p id="date-error" className="mt-1 text-sm text-red-600" role="alert">{errors.date}</p>}
          </div>

          <div>
            <label htmlFor="time" className="block text-sm font-medium">Time <span aria-hidden>★</span></label>
            <input
              id="time"
              name="time"
              type="time"
              aria-required="true"
              aria-invalid={errors.time ? 'true' : 'false'}
              aria-describedby={errors.time ? 'time-error' : undefined}
              value={form.time}
              onChange={handleChange}
              className="mt-1 block w-full rounded-md border px-3 py-2"
            />
            {errors.time && <p id="time-error" className="mt-1 text-sm text-red-600" role="alert">{errors.time}</p>}
          </div>

          <div>
            <label htmlFor="partySize" className="block text-sm font-medium">Party size</label>
            <input
              id="partySize"
              name="partySize"
              type="number"
              min="1"
              aria-describedby={errors.partySize ? 'partySize-error' : undefined}
              value={form.partySize}
              onChange={handleChange}
              className="mt-1 block w-full rounded-md border px-3 py-2"
            />
            {errors.partySize && <p id="partySize-error" className="mt-1 text-sm text-red-600" role="alert">{errors.partySize}</p>}
          </div>

          <div className="sm:col-span-2">
            <label htmlFor="notes" className="block text-sm font-medium">Notes</label>
            <textarea
              id="notes"
              name="notes"
              rows={3}
              value={form.notes}
              onChange={handleChange}
              className="mt-1 block w-full rounded-md border px-3 py-2"
            />
          </div>
        </div>

        <fieldset className="mt-4 border-t pt-4">
          <legend className="sr-only">Agreement</legend>
          <div className="flex items-start">
            <div className="flex items-center h-5">
              <input
                id="agree"
                name="agree"
                type="checkbox"
                checked={form.agree}
                onChange={handleChange}
                aria-required="true"
                aria-invalid={errors.agree ? 'true' : 'false'}
                className="focus:ring h-4 w-4 rounded"
              />
            </div>
            <div className="ml-3 text-sm">
              <label htmlFor="agree" className="font-medium">I agree to the booking terms</label>
              {errors.agree && <p id="agree-error" className="text-sm text-red-600" role="alert">{errors.agree}</p>}
            </div>
          </div>
        </fieldset>

        <div className="mt-6 flex items-center justify-between">
          <div>
            <button type="submit" className="inline-flex items-center px-4 py-2 rounded-lg shadow text-white bg-slate-700 hover:bg-slate-800 focus:outline-none" aria-label="Submit booking">Confirm booking</button>
          </div>

          <div aria-live="polite" aria-atomic="true">
            {submitted && <p className="text-sm text-green-700">Booking submitted — thank you!</p>}
          </div>
        </div>

        {/* Global error summary for screen reader users */}
        {Object.keys(errors).length > 0 && (
          <div id="form-errors" className="sr-only" role="alert">Form has errors. Please check the fields.</div>
        )}
      </form>
    </section>
  );
}

/* ------------------ src/__tests__/BookingForm.test.jsx (virtual) ------------------

/* ------------------ App component (exported) ------------------ */
export default function App() {
  const [lastBooking, setLastBooking] = useState(null);

  function handleNewBooking(booking) {
    setLastBooking(booking);
  }

  return (
    <div className="min-h-screen bg-slate-50 p-4 sm:p-8">
      <header className="max-w-4xl mx-auto flex items-center justify-between mb-6">
        <div>
          <h1 className="text-3xl font-bold">Breeze Reservations</h1>
          <p className="text-sm text-slate-600">Accessible, responsive booking demo</p>
        </div>
        <nav aria-label="Main navigation">
          <ul className="flex gap-3 text-sm">
            <li><a className="underline" href="#booking-heading">Book</a></li>
            <li><a className="underline" href="#details">Details</a></li>
          </ul>
        </nav>
      </header>

      <main className="max-w-4xl mx-auto grid gap-6">
        <BookingForm onSubmit={handleNewBooking} />

        <section id="details" aria-labelledby="details-heading" className="bg-white rounded-2xl p-6 shadow">
          <h2 id="details-heading" className="text-xl font-semibold">Booking details</h2>
          <p className="text-sm text-slate-600">Your recent booking will appear here after submission.</p>

          {lastBooking ? (
            <article className="mt-4">
              <h3 className="font-medium">{lastBooking.fullName}</h3>
              <dl className="mt-2 grid grid-cols-1 sm:grid-cols-2 gap-2 text-sm">
                <div>
                  <dt className="font-semibold">When</dt>
                  <dd>{lastBooking.date} at {lastBooking.time}</dd>
                </div>
                <div>
                  <dt className="font-semibold">Party size</dt>
                  <dd>{lastBooking.partySize}</dd>
                </div>
                <div className="sm:col-span-2">
                  <dt className="font-semibold">Notes</dt>
                  <dd>{lastBooking.notes || '—'}</dd>
                </div>
              </dl>
            </article>
          ) : (
            <p className="mt-4 text-sm">No booking yet.</p>
          )}
        </section>

        <footer className="text-center text-sm text-slate-500">
          <p>Prototype built for evaluation — includes unit tests and accessibility features.</p>
        </footer>
      </main>
    </div>
  );
}
